(defun concatenare (l1 l2)
  (cond
    ((null l1) l2)
    (t (cons (car l1) (concatenare (cdr l1) l2)))))

(defun inv (l)
  (cond
    ((null l) nil)
    ((listp (car l)) (concatenare (inv (cdr l)) (list (inv (car l)))))
    (t (concatenare (inv (cdr l)) (list (car l))))))

(defun digit (e1 e2 c)
  (cond 
    ((< 9 (+ c e1 e2)) (mod (+ c e1 e2) 10))
    (t (+ c e1 e2))))

(defun carry (e1 e2 c)
  (cond
    ((< 9 (+ c e1 e2)) 1)
    (t 0)))

(defun suma (l k c r)
  (cond
    ((and (null l) (null k) (= 0 c)) r)
    ((and (null l) (null k) (/= 0 c)) (cons c r))
    ((null k) (suma (cdr l) k (carry (car l) 0 c) (cons (digit (car l) 0 c) r)))
    ((null l) (suma l (cdr k) (carry 0 (car k) c) (cons (digit 0 (car k) c) r)))
    (t (suma (cdr l) (cdr k)
             (carry (car l) (car k) c)
             (cons (digit (car l) (car k) c) r)))))

(defun main (l k)
  (inv (suma (inv l) (inv k) 0 nil)))

