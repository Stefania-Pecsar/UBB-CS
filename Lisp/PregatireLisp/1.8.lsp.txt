;a
(defun elimina(l n poz)
  (cond 
	((null l) nil)
	((equal n poz) (elimina (cdr l) n (+ 1 poz)))
	(t (cons (car l) (elimina (cdr l) n (+ 1 poz))))))

(defun mainA(l n)
	(elimina l n 1))

;b
(defun carry(a b c)
  (cond
    (( > (+(+ a b) c) 9) 1)
    (t 0)
  )
)

(defun digit(a b c)
  (cond
    (( > (+ (+ a b) c) 9) (mod (+ (+ a b) c) 10))
    (t (+ (+ a b) c))
  )
)

(defun myAppend(l p)
  (cond
    ((null l) p)
    (t (cons (car l) (myAppend (cdr l) p)))
  )
)

(defun myReverse(l)
  (cond
    ((null l) nil)
    ((listp (car l)) (myAppend (myReverse (cdr l)) (list (myReverse (car l)))))
    (t (myAppend (myReverse (cdr l)) (list (car l))))
  )
)


(defun myAdd(l p c r)
  (cond 
    ((and (and (null l) (null p)) (equal c 1)) (cons c r))
    ((and (and (null l) (null p)) (equal c 0)) r)
    ((null p) (myAdd (cdr l) nil (carry (car l) 0 c) (cons (digit (car l) 0 c) r)))
    ((null l) (myAdd nil (cdr p) (carry 0 (car p) c) (cons (digit 0 (car p) c) r)))
    (t (myAdd (cdr l) (cdr p) (carry (car l) (car p) c) (cons (digit (car l) (car p) c) r)))
  )
)

(defun mySuccessor(l)
  (myAdd (myReverse l) (list 1) 0 (list ))
)	


;c
(defun liniarizare(l)
  (cond
	((null l) nil)
	((listp (car l)) (myAppend (liniarizare (car l)) (liniarizare (cdr l))))
	((atom (car l)) (cons (car l) (liniarizare (cdr l))))
	(t (liniarizare (cdr l)))))

(defun exista(l elem)
  (cond
	((null l) nil)
	((equal (car l) elem t)
	(t (exista (cdr l) elem))))

(defun setare(l r)
  (cond 
	((null l) r)
	((exista r (car l)) (setare (cdr l) r))
	
